I"H<h1 id="cctv-analysis_case-study">CCTV analysis_Case Study</h1>

<h2 id="analysis-of-cctv-cameras-in-seoul">Analysis of CCTV cameras in Seoul</h2>
<p>Data obtained from <a href="https://data.seoul.go.kr/dataList/OA-2734/C/1/datasetView.do">https://data.seoul.go.kr/</a>. Working with following data :</p>
<ul>
  <li>number of CCTV cameras in Seoul by district</li>
  <li>population of each district in Seoul.</li>
</ul>

<p>The goal is to analyze any possible correlations between population and the number of CCTV cameras in Seoul.</p>

<h3 id="1-import-and-clean-the-dataset">1. Import and clean the dataset</h3>
<p><code class="language-plaintext highlighter-rouge">CCTV_Seoul</code> contains numbers of CCTV cameras in each year from 2011 to 2018 by district in Seoul.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># import libraries
</span><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="c1"># set woring directory
</span><span class="n">wd</span> <span class="o">=</span> <span class="s">'/Users/summerh/OneDrive/DS_project/'</span>
<span class="n">filename</span> <span class="o">=</span> <span class="s">'200505_01_cctv_seoul.xlsx'</span>

<span class="n">CCTV_Seoul</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_excel</span><span class="p">(</span><span class="n">wd</span><span class="o">+</span><span class="n">filename</span><span class="p">,</span> <span class="n">sheet_name</span> <span class="o">=</span> <span class="s">'Excel_Import_1'</span><span class="p">)</span><span class="c1">#, encoding = 'utf-8')
</span>
<span class="c1"># Set the column names
</span><span class="n">CCTV_Seoul</span><span class="p">.</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s">'District'</span><span class="p">,</span> <span class="s">'Total'</span><span class="p">,</span> <span class="s">'~2011'</span><span class="p">]</span> <span class="o">+</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">2012</span><span class="p">,</span><span class="mi">2019</span><span class="p">))</span>
<span class="n">CCTV_Seoul</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>District</th>
      <th>Total</th>
      <th>~2011</th>
      <th>2012</th>
      <th>2013</th>
      <th>2014</th>
      <th>2015</th>
      <th>2016</th>
      <th>2017</th>
      <th>2018</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Í∞ï ÎÇ® Íµ¨</td>
      <td>5221</td>
      <td>1944.0</td>
      <td>195.0</td>
      <td>316.0</td>
      <td>430</td>
      <td>546</td>
      <td>765</td>
      <td>577</td>
      <td>448</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Í∞ï Îèô Íµ¨</td>
      <td>1879</td>
      <td>303.0</td>
      <td>387.0</td>
      <td>134.0</td>
      <td>59</td>
      <td>144</td>
      <td>194</td>
      <td>273</td>
      <td>385</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Í∞ï Î∂Å Íµ¨</td>
      <td>1265</td>
      <td>243.0</td>
      <td>88.0</td>
      <td>141.0</td>
      <td>74</td>
      <td>145</td>
      <td>254</td>
      <td>1</td>
      <td>319</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Í∞ï ÏÑú Íµ¨</td>
      <td>1617</td>
      <td>219.0</td>
      <td>155.0</td>
      <td>118.0</td>
      <td>230</td>
      <td>187</td>
      <td>190</td>
      <td>264</td>
      <td>254</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Í¥Ä ÏïÖ Íµ¨</td>
      <td>3985</td>
      <td>430.0</td>
      <td>56.0</td>
      <td>419.0</td>
      <td>487</td>
      <td>609</td>
      <td>619</td>
      <td>694</td>
      <td>671</td>
    </tr>
  </tbody>
</table>
</div>

<p>Check for the NaN values in the dataset. Define a function which shows the row containing NaN values.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Detect NaN and show the rows
</span><span class="k">def</span> <span class="nf">find_Nan</span><span class="p">(</span><span class="n">df</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">.</span><span class="n">isnull</span><span class="p">().</span><span class="nb">any</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">find_Nan</span><span class="p">(</span><span class="n">CCTV_Seoul</span><span class="p">)</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>District</th>
      <th>Total</th>
      <th>~2011</th>
      <th>2012</th>
      <th>2013</th>
      <th>2014</th>
      <th>2015</th>
      <th>2016</th>
      <th>2017</th>
      <th>2018</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>10</th>
      <td>ÎèôÎåÄÎ¨∏Íµ¨</td>
      <td>2003</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>1326</td>
      <td>111</td>
      <td>233</td>
      <td>136</td>
      <td>197</td>
    </tr>
    <tr>
      <th>24</th>
      <td>Ï§ë Îûë Íµ¨</td>
      <td>1068</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>770</td>
      <td>102</td>
      <td>121</td>
      <td>66</td>
      <td>9</td>
    </tr>
  </tbody>
</table>
</div>

<p>It turned out that original dataframe contains two rows with NaN values. Data from 2011 to 2013 is missing. Create a new column which sums all the years from 2014 to 2018. Then drop the columns used for summation.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Make a column list
</span><span class="n">column_list</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">CCTV_Seoul</span><span class="p">)</span> <span class="c1"># create list of column index
</span><span class="k">del</span> <span class="n">column_list</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span> <span class="c1"># Drop 'District', 'Total' from the list
</span><span class="k">del</span> <span class="n">column_list</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">:]</span> <span class="c1"># Drop year from 2015
# column_list.remove('District') also works but takes only one argument each time. 
</span><span class="k">print</span><span class="p">(</span><span class="n">column_list</span><span class="p">)</span>

<span class="c1"># Create new column and drop the rest using the column list
</span><span class="n">CCTV_Seoul</span><span class="p">[</span><span class="s">'~2014'</span><span class="p">]</span> <span class="o">=</span> <span class="n">CCTV_Seoul</span><span class="p">[</span><span class="n">column_list</span><span class="p">].</span><span class="nb">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># create column : row sum of column list
</span><span class="n">CCTV_Seoul</span> <span class="o">=</span> <span class="n">CCTV_Seoul</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">column_list</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># drop years in column list. dropÏùÄ ÏÉàÎ°ú Îç∞Ïù¥ÌÑ∞ÌîÑÎ†àÏûÑÏúºÎ°ú ÏßÄÏ†ïÌï¥Ï§òÏïºÎßå Ï†ÄÏû•ÎêòÎäîÎìØ
#Ïó¥Î∞©Ìñ•ÏúºÎ°ú ÎìúÎûçÌï¥ÏÑú axis =1ÏûÑ
</span>
<span class="c1"># Change order of columns
</span><span class="n">col</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">CCTV_Seoul</span><span class="p">)</span>
<span class="n">col</span> <span class="o">=</span> <span class="n">col</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span> <span class="p">[</span><span class="n">col</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span> <span class="o">+</span> <span class="n">col</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
<span class="n">CCTV_Seoul</span> <span class="o">=</span> <span class="n">CCTV_Seoul</span><span class="p">[</span><span class="n">col</span><span class="p">]</span>

<span class="n">CCTV_Seoul</span><span class="p">.</span><span class="n">head</span><span class="p">()</span> <span class="c1"># Done
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>['~2011', 2012, 2013, 2014]
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>District</th>
      <th>Total</th>
      <th>~2014</th>
      <th>2015</th>
      <th>2016</th>
      <th>2017</th>
      <th>2018</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Í∞ï ÎÇ® Íµ¨</td>
      <td>5221</td>
      <td>2885.0</td>
      <td>546</td>
      <td>765</td>
      <td>577</td>
      <td>448</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Í∞ï Îèô Íµ¨</td>
      <td>1879</td>
      <td>883.0</td>
      <td>144</td>
      <td>194</td>
      <td>273</td>
      <td>385</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Í∞ï Î∂Å Íµ¨</td>
      <td>1265</td>
      <td>546.0</td>
      <td>145</td>
      <td>254</td>
      <td>1</td>
      <td>319</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Í∞ï ÏÑú Íµ¨</td>
      <td>1617</td>
      <td>722.0</td>
      <td>187</td>
      <td>190</td>
      <td>264</td>
      <td>254</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Í¥Ä ÏïÖ Íµ¨</td>
      <td>3985</td>
      <td>1392.0</td>
      <td>609</td>
      <td>619</td>
      <td>694</td>
      <td>671</td>
    </tr>
  </tbody>
</table>
</div>

<p><code class="language-plaintext highlighter-rouge">pop_Seoul</code> consists of population of Seoul by each district in 2018. The population is classified into two major categories according to nationality : Korean and foreigner. It also contains the number of elderly living in each district of Seoul.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">filename</span> <span class="o">=</span> <span class="s">'200505_01_pop_seoul.txt'</span>
<span class="n">pop_Seoul</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">wd</span><span class="o">+</span><span class="n">filename</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s">'</span><span class="se">\t</span><span class="s">'</span><span class="p">,</span> <span class="n">lineterminator</span><span class="o">=</span><span class="s">'</span><span class="se">\r</span><span class="s">'</span><span class="p">,</span> <span class="n">header</span> <span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">thousands</span><span class="o">=</span><span class="s">','</span><span class="p">)</span> <span class="c1"># import tab-delimited txt file
</span><span class="n">pop_Seoul</span> <span class="o">=</span> <span class="n">pop_Seoul</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:,[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">13</span><span class="p">]]</span> <span class="c1"># Extract columns needed
</span><span class="n">pop_Seoul</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>ÏûêÏπòÍµ¨</th>
      <th>Í≥Ñ</th>
      <th>Í≥Ñ.1</th>
      <th>Í≥Ñ.2</th>
      <th>65ÏÑ∏Ïù¥ÏÉÅÍ≥†Î†πÏûê</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Ìï©Í≥Ñ</td>
      <td>10013781</td>
      <td>9733655</td>
      <td>280126</td>
      <td>1518239</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Ï¢ÖÎ°úÍµ¨</td>
      <td>161984</td>
      <td>151217</td>
      <td>10767</td>
      <td>28073</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Ï§ëÍµ¨</td>
      <td>136469</td>
      <td>126175</td>
      <td>10294</td>
      <td>23794</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Ïö©ÏÇ∞Íµ¨</td>
      <td>246165</td>
      <td>229579</td>
      <td>16586</td>
      <td>39439</td>
    </tr>
    <tr>
      <th>4</th>
      <td>ÏÑ±ÎèôÍµ¨</td>
      <td>307193</td>
      <td>299042</td>
      <td>8151</td>
      <td>44728</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pop_Seoul</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">'Total'</span> <span class="c1"># Select specific cell using iloc
#Rename the columns index
</span><span class="n">pop_Seoul</span><span class="p">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span> <span class="o">=</span> <span class="p">{</span><span class="n">pop_Seoul</span><span class="p">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span><span class="s">'District'</span><span class="p">,</span>
                            <span class="n">pop_Seoul</span><span class="p">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="s">'Population'</span><span class="p">,</span>
                            <span class="n">pop_Seoul</span><span class="p">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span><span class="s">'Korean'</span><span class="p">,</span>
                            <span class="n">pop_Seoul</span><span class="p">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span><span class="s">'Foreigner'</span><span class="p">,</span>
                            <span class="n">pop_Seoul</span><span class="p">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">4</span><span class="p">]:</span><span class="s">'Elderly'</span><span class="p">},</span> <span class="n">inplace</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
<span class="n">pop_Seoul</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>District</th>
      <th>Population</th>
      <th>Korean</th>
      <th>Foreigner</th>
      <th>Elderly</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Total</td>
      <td>10013781</td>
      <td>9733655</td>
      <td>280126</td>
      <td>1518239</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Ï¢ÖÎ°úÍµ¨</td>
      <td>161984</td>
      <td>151217</td>
      <td>10767</td>
      <td>28073</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Ï§ëÍµ¨</td>
      <td>136469</td>
      <td>126175</td>
      <td>10294</td>
      <td>23794</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Ïö©ÏÇ∞Íµ¨</td>
      <td>246165</td>
      <td>229579</td>
      <td>16586</td>
      <td>39439</td>
    </tr>
    <tr>
      <th>4</th>
      <td>ÏÑ±ÎèôÍµ¨</td>
      <td>307193</td>
      <td>299042</td>
      <td>8151</td>
      <td>44728</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">find_Nan</span><span class="p">(</span><span class="n">pop_Seoul</span><span class="p">)</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>District</th>
      <th>Population</th>
      <th>Korean</th>
      <th>Foreigner</th>
      <th>Elderly</th>
    </tr>
  </thead>
  <tbody>
  </tbody>
</table>
</div>

<p><code class="language-plaintext highlighter-rouge">pop_Seoul</code> did not contain any NaN value.</p>

<h3 id="2-inspect-each-dataframes-and-merge-them">2. Inspect each dataframes and merge them.</h3>
<p>To see the broad scope, sort data by total number of CCTV cameras in each district.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#Ï†ÅÏ†àÌïú Í∑∏ÎûòÌîÑÎ•º ÎÑ£ÏúºÎ©¥ ÏßÅÍ¥ÄÏ†ÅÏù¥Í≥† Ï¢ãÏùÑÎìØ  https://www.python-graph-gallery.com/
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">CCTV_Seoul</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="s">'Total'</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">).</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>District</th>
      <th>Total</th>
      <th>~2014</th>
      <th>2015</th>
      <th>2016</th>
      <th>2017</th>
      <th>2018</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Í∞ï ÎÇ® Íµ¨</td>
      <td>5221</td>
      <td>2885.0</td>
      <td>546</td>
      <td>765</td>
      <td>577</td>
      <td>448</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Í¥Ä ÏïÖ Íµ¨</td>
      <td>3985</td>
      <td>1392.0</td>
      <td>609</td>
      <td>619</td>
      <td>694</td>
      <td>671</td>
    </tr>
    <tr>
      <th>6</th>
      <td>Íµ¨ Î°ú Íµ¨</td>
      <td>3227</td>
      <td>1607.0</td>
      <td>268</td>
      <td>326</td>
      <td>540</td>
      <td>486</td>
    </tr>
    <tr>
      <th>16</th>
      <td>ÏÑ± Î∂Å Íµ¨</td>
      <td>3003</td>
      <td>1408.0</td>
      <td>279</td>
      <td>388</td>
      <td>285</td>
      <td>643</td>
    </tr>
    <tr>
      <th>21</th>
      <td>ÏùÄ Ìèâ Íµ¨</td>
      <td>2962</td>
      <td>1890.0</td>
      <td>180</td>
      <td>296</td>
      <td>229</td>
      <td>367</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">CCTV_Seoul</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="s">'Total'</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">).</span><span class="n">tail</span><span class="p">()</span> 
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>District</th>
      <th>Total</th>
      <th>~2014</th>
      <th>2015</th>
      <th>2016</th>
      <th>2017</th>
      <th>2018</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>23</th>
      <td>Ï§ë     Íµ¨</td>
      <td>1544</td>
      <td>384.0</td>
      <td>245</td>
      <td>270</td>
      <td>317</td>
      <td>328</td>
    </tr>
    <tr>
      <th>22</th>
      <td>Ï¢Ö Î°ú Íµ¨</td>
      <td>1471</td>
      <td>746.0</td>
      <td>195</td>
      <td>148</td>
      <td>281</td>
      <td>101</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Í∞ï Î∂Å Íµ¨</td>
      <td>1265</td>
      <td>546.0</td>
      <td>145</td>
      <td>254</td>
      <td>1</td>
      <td>319</td>
    </tr>
    <tr>
      <th>24</th>
      <td>Ï§ë Îûë Íµ¨</td>
      <td>1068</td>
      <td>770.0</td>
      <td>102</td>
      <td>121</td>
      <td>66</td>
      <td>9</td>
    </tr>
    <tr>
      <th>9</th>
      <td>ÎèÑ Î¥â Íµ¨</td>
      <td>858</td>
      <td>456.0</td>
      <td>59</td>
      <td>155</td>
      <td>117</td>
      <td>71</td>
    </tr>
  </tbody>
</table>
</div>

<p>Each number in the column indicates the increased number of CCTV cameras in each year. Í∞ïÎÇ®Íµ¨ records the higest number of CCTV in Seoul. Whereas ÎèÑÎ¥âÍµ¨ records the lowest number of CCTV cameras. Í∞ïÎÇ®Íµ¨ has installed more than six times of cameras than ÎèÑÎ¥âÍµ¨ did.</p>

<p>Create a new column by calculating the percentage increase since 2015.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Calculate percentage increase since 2015
</span><span class="n">inc_range</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">2015</span><span class="p">,</span><span class="mi">2019</span><span class="p">))</span> <span class="c1"># list to sum year 2015 to 2018
</span><span class="n">CCTV_Seoul</span><span class="p">[</span><span class="s">'Per_inc'</span><span class="p">]</span> <span class="o">=</span> <span class="n">CCTV_Seoul</span><span class="p">[</span><span class="n">inc_range</span><span class="p">].</span><span class="nb">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="n">CCTV_Seoul</span><span class="p">[</span><span class="s">'~2014'</span><span class="p">]</span><span class="o">*</span><span class="mi">100</span>
<span class="n">CCTV_Seoul</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="s">'Per_inc'</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">).</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>District</th>
      <th>Total</th>
      <th>~2014</th>
      <th>2015</th>
      <th>2016</th>
      <th>2017</th>
      <th>2018</th>
      <th>Per_inc</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>7</th>
      <td>Í∏à Ï≤ú Íµ¨</td>
      <td>1634</td>
      <td>387.0</td>
      <td>382</td>
      <td>136</td>
      <td>199</td>
      <td>530</td>
      <td>322.222222</td>
    </tr>
    <tr>
      <th>23</th>
      <td>Ï§ë     Íµ¨</td>
      <td>1544</td>
      <td>384.0</td>
      <td>245</td>
      <td>270</td>
      <td>317</td>
      <td>328</td>
      <td>302.083333</td>
    </tr>
    <tr>
      <th>19</th>
      <td>ÏòÅÎì±Ìè¨Íµ¨</td>
      <td>2495</td>
      <td>676.0</td>
      <td>366</td>
      <td>289</td>
      <td>371</td>
      <td>793</td>
      <td>269.082840</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Í¥Ä ÏïÖ Íµ¨</td>
      <td>3985</td>
      <td>1392.0</td>
      <td>609</td>
      <td>619</td>
      <td>694</td>
      <td>671</td>
      <td>186.278736</td>
    </tr>
    <tr>
      <th>15</th>
      <td>ÏÑ± Îèô Íµ¨</td>
      <td>2679</td>
      <td>993.0</td>
      <td>258</td>
      <td>201</td>
      <td>933</td>
      <td>294</td>
      <td>169.788520</td>
    </tr>
  </tbody>
</table>
</div>

<p>Í∏àÏ≤úÍµ¨ and Ï§ëÍµ¨ have increased the number of CCTV cameras about three times more since 2015.</p>

<p>Does it mean that Í∞ïÎÇ®Íµ¨ or Í∏àÏ≤úÍµ¨ has highest population in Seoul? Sort <code class="language-plaintext highlighter-rouge">pop_Seoul</code> dataframe by total population. Drop the first ‚ÄòTotal‚Äô row as it‚Äôs not needed in the further analysis.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pop_Seoul</span><span class="p">.</span><span class="n">drop</span><span class="p">([</span><span class="mi">0</span><span class="p">],</span> <span class="n">inplace</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
<span class="n">pop_Seoul</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="s">'Population'</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span> <span class="bp">False</span><span class="p">).</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>District</th>
      <th>Population</th>
      <th>Korean</th>
      <th>Foreigner</th>
      <th>Elderly</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>24</th>
      <td>ÏÜ°ÌååÍµ¨</td>
      <td>680883</td>
      <td>674095</td>
      <td>6788</td>
      <td>89539</td>
    </tr>
    <tr>
      <th>16</th>
      <td>Í∞ïÏÑúÍµ¨</td>
      <td>595703</td>
      <td>589302</td>
      <td>6401</td>
      <td>85992</td>
    </tr>
    <tr>
      <th>23</th>
      <td>Í∞ïÎÇ®Íµ¨</td>
      <td>549898</td>
      <td>544804</td>
      <td>5094</td>
      <td>72602</td>
    </tr>
    <tr>
      <th>11</th>
      <td>ÎÖ∏ÏõêÍµ¨</td>
      <td>535495</td>
      <td>531037</td>
      <td>4458</td>
      <td>82682</td>
    </tr>
    <tr>
      <th>21</th>
      <td>Í¥ÄÏïÖÍµ¨</td>
      <td>516662</td>
      <td>499374</td>
      <td>17288</td>
      <td>76664</td>
    </tr>
  </tbody>
</table>
</div>

<p>None of those high number of CCTV districts were included in the top 5 population in Seoul district. Calculate the ratio of foreigners and elderies.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pop_Seoul</span><span class="p">[</span><span class="s">'r_foreigner'</span><span class="p">]</span> <span class="o">=</span> <span class="n">pop_Seoul</span><span class="p">[</span><span class="s">'Foreigner'</span><span class="p">]</span><span class="o">/</span><span class="n">pop_Seoul</span><span class="p">[</span><span class="s">'Population'</span><span class="p">]</span><span class="o">*</span><span class="mi">100</span>
<span class="n">pop_Seoul</span><span class="p">[</span><span class="s">'r_elderly'</span><span class="p">]</span> <span class="o">=</span> <span class="n">pop_Seoul</span><span class="p">[</span><span class="s">'Elderly'</span><span class="p">]</span><span class="o">/</span><span class="n">pop_Seoul</span><span class="p">[</span><span class="s">'Population'</span><span class="p">]</span><span class="o">*</span><span class="mi">100</span>
<span class="n">pop_Seoul</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="s">'r_foreigner'</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span> <span class="bp">False</span><span class="p">).</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>District</th>
      <th>Population</th>
      <th>Korean</th>
      <th>Foreigner</th>
      <th>Elderly</th>
      <th>r_foreigner</th>
      <th>r_elderly</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>19</th>
      <td>ÏòÅÎì±Ìè¨Íµ¨</td>
      <td>404766</td>
      <td>371903</td>
      <td>32863</td>
      <td>59373</td>
      <td>8.119012</td>
      <td>14.668475</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Ï§ëÍµ¨</td>
      <td>136469</td>
      <td>126175</td>
      <td>10294</td>
      <td>23794</td>
      <td>7.543105</td>
      <td>17.435462</td>
    </tr>
    <tr>
      <th>18</th>
      <td>Í∏àÏ≤úÍµ¨</td>
      <td>251370</td>
      <td>232583</td>
      <td>18787</td>
      <td>38508</td>
      <td>7.473843</td>
      <td>15.319251</td>
    </tr>
    <tr>
      <th>17</th>
      <td>Íµ¨Î°úÍµ¨</td>
      <td>438308</td>
      <td>405837</td>
      <td>32471</td>
      <td>67432</td>
      <td>7.408261</td>
      <td>15.384615</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Ïö©ÏÇ∞Íµ¨</td>
      <td>246165</td>
      <td>229579</td>
      <td>16586</td>
      <td>39439</td>
      <td>6.737757</td>
      <td>16.021368</td>
    </tr>
  </tbody>
</table>
</div>

<p>Foreigners in ÏòÅÎì±Ìè¨Íµ¨ account for about 8% of the population in the district, which is the highest ratio in Seoul. Ï§ëÍµ¨ followed ÏòÅÎì±Ìè¨Íµ¨ with 7.5%.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pop_Seoul</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="s">'Foreigner'</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">).</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>District</th>
      <th>Population</th>
      <th>Korean</th>
      <th>Foreigner</th>
      <th>Elderly</th>
      <th>r_foreigner</th>
      <th>r_elderly</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>19</th>
      <td>ÏòÅÎì±Ìè¨Íµ¨</td>
      <td>404766</td>
      <td>371903</td>
      <td>32863</td>
      <td>59373</td>
      <td>8.119012</td>
      <td>14.668475</td>
    </tr>
    <tr>
      <th>17</th>
      <td>Íµ¨Î°úÍµ¨</td>
      <td>438308</td>
      <td>405837</td>
      <td>32471</td>
      <td>67432</td>
      <td>7.408261</td>
      <td>15.384615</td>
    </tr>
    <tr>
      <th>18</th>
      <td>Í∏àÏ≤úÍµ¨</td>
      <td>251370</td>
      <td>232583</td>
      <td>18787</td>
      <td>38508</td>
      <td>7.473843</td>
      <td>15.319251</td>
    </tr>
    <tr>
      <th>21</th>
      <td>Í¥ÄÏïÖÍµ¨</td>
      <td>516662</td>
      <td>499374</td>
      <td>17288</td>
      <td>76664</td>
      <td>3.346095</td>
      <td>14.838328</td>
    </tr>
    <tr>
      <th>6</th>
      <td>ÎèôÎåÄÎ¨∏Íµ¨</td>
      <td>362793</td>
      <td>346156</td>
      <td>16637</td>
      <td>60367</td>
      <td>4.585811</td>
      <td>16.639516</td>
    </tr>
  </tbody>
</table>
</div>

<p>As expected, ÏòÅÎì±Ìè¨Íµ¨ has highest number of foreigners living in Seoul.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pop_Seoul</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="s">'r_elderly'</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">).</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>District</th>
      <th>Population</th>
      <th>Korean</th>
      <th>Foreigner</th>
      <th>Elderly</th>
      <th>r_foreigner</th>
      <th>r_elderly</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>9</th>
      <td>Í∞ïÎ∂ÅÍµ¨</td>
      <td>316750</td>
      <td>312985</td>
      <td>3765</td>
      <td>61660</td>
      <td>1.188635</td>
      <td>19.466456</td>
    </tr>
    <tr>
      <th>10</th>
      <td>ÎèÑÎ¥âÍµ¨</td>
      <td>333495</td>
      <td>331238</td>
      <td>2257</td>
      <td>60023</td>
      <td>0.676772</td>
      <td>17.998171</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Ï§ëÍµ¨</td>
      <td>136469</td>
      <td>126175</td>
      <td>10294</td>
      <td>23794</td>
      <td>7.543105</td>
      <td>17.435462</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Ï¢ÖÎ°úÍµ¨</td>
      <td>161984</td>
      <td>151217</td>
      <td>10767</td>
      <td>28073</td>
      <td>6.646953</td>
      <td>17.330724</td>
    </tr>
    <tr>
      <th>12</th>
      <td>ÏùÄÌèâÍµ¨</td>
      <td>482509</td>
      <td>478019</td>
      <td>4490</td>
      <td>82245</td>
      <td>0.930553</td>
      <td>17.045278</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pop_Seoul</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="s">'r_elderly'</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">True</span><span class="p">).</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>District</th>
      <th>Population</th>
      <th>Korean</th>
      <th>Foreigner</th>
      <th>Elderly</th>
      <th>r_foreigner</th>
      <th>r_elderly</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>24</th>
      <td>ÏÜ°ÌååÍµ¨</td>
      <td>680883</td>
      <td>674095</td>
      <td>6788</td>
      <td>89539</td>
      <td>0.996941</td>
      <td>13.150424</td>
    </tr>
    <tr>
      <th>23</th>
      <td>Í∞ïÎÇ®Íµ¨</td>
      <td>549898</td>
      <td>544804</td>
      <td>5094</td>
      <td>72602</td>
      <td>0.926354</td>
      <td>13.202812</td>
    </tr>
    <tr>
      <th>5</th>
      <td>Í¥ëÏßÑÍµ¨</td>
      <td>365990</td>
      <td>350417</td>
      <td>15573</td>
      <td>48989</td>
      <td>4.255034</td>
      <td>13.385338</td>
    </tr>
    <tr>
      <th>22</th>
      <td>ÏÑúÏ¥àÍµ¨</td>
      <td>434801</td>
      <td>430568</td>
      <td>4233</td>
      <td>58332</td>
      <td>0.973549</td>
      <td>13.415793</td>
    </tr>
    <tr>
      <th>15</th>
      <td>ÏñëÏ≤úÍµ¨</td>
      <td>460532</td>
      <td>456339</td>
      <td>4193</td>
      <td>62761</td>
      <td>0.910469</td>
      <td>13.627935</td>
    </tr>
  </tbody>
</table>
</div>

<p>Elderly people accounts for 19% of the population in Í∞ïÎ∂ÅÍµ¨. However ÏÜ°ÌååÍµ¨ only had 13% of elederly in the district.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pop_Seoul</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="s">'Elderly'</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">).</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>District</th>
      <th>Population</th>
      <th>Korean</th>
      <th>Foreigner</th>
      <th>Elderly</th>
      <th>r_foreigner</th>
      <th>r_elderly</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>24</th>
      <td>ÏÜ°ÌååÍµ¨</td>
      <td>680883</td>
      <td>674095</td>
      <td>6788</td>
      <td>89539</td>
      <td>0.996941</td>
      <td>13.150424</td>
    </tr>
    <tr>
      <th>16</th>
      <td>Í∞ïÏÑúÍµ¨</td>
      <td>595703</td>
      <td>589302</td>
      <td>6401</td>
      <td>85992</td>
      <td>1.074529</td>
      <td>14.435381</td>
    </tr>
    <tr>
      <th>11</th>
      <td>ÎÖ∏ÏõêÍµ¨</td>
      <td>535495</td>
      <td>531037</td>
      <td>4458</td>
      <td>82682</td>
      <td>0.832501</td>
      <td>15.440294</td>
    </tr>
    <tr>
      <th>12</th>
      <td>ÏùÄÌèâÍµ¨</td>
      <td>482509</td>
      <td>478019</td>
      <td>4490</td>
      <td>82245</td>
      <td>0.930553</td>
      <td>17.045278</td>
    </tr>
    <tr>
      <th>21</th>
      <td>Í¥ÄÏïÖÍµ¨</td>
      <td>516662</td>
      <td>499374</td>
      <td>17288</td>
      <td>76664</td>
      <td>3.346095</td>
      <td>14.838328</td>
    </tr>
  </tbody>
</table>
</div>

<p>District names in <code class="language-plaintext highlighter-rouge">CCTV_Seoul</code> include blank spaces. After stripping the white spaces, merge two dataframes using ‚ÄòDistrict‚Äô as a key.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># strip white spaces
</span><span class="n">CCTV_Seoul</span><span class="p">[</span><span class="s">'District'</span><span class="p">]</span> <span class="o">=</span> <span class="n">CCTV_Seoul</span><span class="p">[</span><span class="s">'District'</span><span class="p">].</span><span class="nb">str</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">" "</span><span class="p">,</span><span class="s">""</span><span class="p">)</span>
<span class="n">CCTV_Seoul</span><span class="p">[</span><span class="s">'District'</span><span class="p">].</span><span class="n">head</span><span class="p">()</span> <span class="c1"># Done
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0    Í∞ïÎÇ®Íµ¨
1    Í∞ïÎèôÍµ¨
2    Í∞ïÎ∂ÅÍµ¨
3    Í∞ïÏÑúÍµ¨
4    Í¥ÄÏïÖÍµ¨
Name: District, dtype: object
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Merge two dataframes
</span><span class="n">Seoul</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span><span class="n">CCTV_Seoul</span><span class="p">,</span> <span class="n">pop_Seoul</span><span class="p">,</span> <span class="n">on</span> <span class="o">=</span> <span class="s">'District'</span><span class="p">)</span>
<span class="n">Seoul</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>District</th>
      <th>Total</th>
      <th>~2014</th>
      <th>2015</th>
      <th>2016</th>
      <th>2017</th>
      <th>2018</th>
      <th>Per_inc</th>
      <th>Population</th>
      <th>Korean</th>
      <th>Foreigner</th>
      <th>Elderly</th>
      <th>r_foreigner</th>
      <th>r_elderly</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Í∞ïÎÇ®Íµ¨</td>
      <td>5221</td>
      <td>2885.0</td>
      <td>546</td>
      <td>765</td>
      <td>577</td>
      <td>448</td>
      <td>80.970537</td>
      <td>549898</td>
      <td>544804</td>
      <td>5094</td>
      <td>72602</td>
      <td>0.926354</td>
      <td>13.202812</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Í∞ïÎèôÍµ¨</td>
      <td>1879</td>
      <td>883.0</td>
      <td>144</td>
      <td>194</td>
      <td>273</td>
      <td>385</td>
      <td>112.797282</td>
      <td>457042</td>
      <td>452646</td>
      <td>4396</td>
      <td>66401</td>
      <td>0.961837</td>
      <td>14.528424</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Í∞ïÎ∂ÅÍµ¨</td>
      <td>1265</td>
      <td>546.0</td>
      <td>145</td>
      <td>254</td>
      <td>1</td>
      <td>319</td>
      <td>131.684982</td>
      <td>316750</td>
      <td>312985</td>
      <td>3765</td>
      <td>61660</td>
      <td>1.188635</td>
      <td>19.466456</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Í∞ïÏÑúÍµ¨</td>
      <td>1617</td>
      <td>722.0</td>
      <td>187</td>
      <td>190</td>
      <td>264</td>
      <td>254</td>
      <td>123.961219</td>
      <td>595703</td>
      <td>589302</td>
      <td>6401</td>
      <td>85992</td>
      <td>1.074529</td>
      <td>14.435381</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Í¥ÄÏïÖÍµ¨</td>
      <td>3985</td>
      <td>1392.0</td>
      <td>609</td>
      <td>619</td>
      <td>694</td>
      <td>671</td>
      <td>186.278736</td>
      <td>516662</td>
      <td>499374</td>
      <td>17288</td>
      <td>76664</td>
      <td>3.346095</td>
      <td>14.838328</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Compare by counting unique values
</span><span class="n">CCTV_Seoul</span><span class="p">[</span><span class="s">'District'</span><span class="p">].</span><span class="n">nunique</span><span class="p">()</span><span class="o">==</span> <span class="n">pop_Seoul</span><span class="p">[</span><span class="s">'District'</span><span class="p">].</span><span class="n">nunique</span><span class="p">()</span><span class="o">==</span><span class="n">Seoul</span><span class="p">[</span><span class="s">'District'</span><span class="p">].</span><span class="n">nunique</span><span class="p">()</span> <span class="c1"># Great
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>True
</code></pre></div></div>

<p>Successfully merged. In order to avoid any confusion, 
change the column name from ‚ÄòTotal‚Äô to ‚ÄòCCTV‚Äô. Drop the unnecessary columns ~2014 to 2018.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Change the column name
</span><span class="n">Seoul</span><span class="p">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s">'Total'</span><span class="p">:</span><span class="s">'CCTV'</span><span class="p">},</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">Seoul</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>District</th>
      <th>CCTV</th>
      <th>~2014</th>
      <th>2015</th>
      <th>2016</th>
      <th>2017</th>
      <th>2018</th>
      <th>Per_inc</th>
      <th>Population</th>
      <th>Korean</th>
      <th>Foreigner</th>
      <th>Elderly</th>
      <th>r_foreigner</th>
      <th>r_elderly</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Í∞ïÎÇ®Íµ¨</td>
      <td>5221</td>
      <td>2885.0</td>
      <td>546</td>
      <td>765</td>
      <td>577</td>
      <td>448</td>
      <td>80.970537</td>
      <td>549898</td>
      <td>544804</td>
      <td>5094</td>
      <td>72602</td>
      <td>0.926354</td>
      <td>13.202812</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Í∞ïÎèôÍµ¨</td>
      <td>1879</td>
      <td>883.0</td>
      <td>144</td>
      <td>194</td>
      <td>273</td>
      <td>385</td>
      <td>112.797282</td>
      <td>457042</td>
      <td>452646</td>
      <td>4396</td>
      <td>66401</td>
      <td>0.961837</td>
      <td>14.528424</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Í∞ïÎ∂ÅÍµ¨</td>
      <td>1265</td>
      <td>546.0</td>
      <td>145</td>
      <td>254</td>
      <td>1</td>
      <td>319</td>
      <td>131.684982</td>
      <td>316750</td>
      <td>312985</td>
      <td>3765</td>
      <td>61660</td>
      <td>1.188635</td>
      <td>19.466456</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Í∞ïÏÑúÍµ¨</td>
      <td>1617</td>
      <td>722.0</td>
      <td>187</td>
      <td>190</td>
      <td>264</td>
      <td>254</td>
      <td>123.961219</td>
      <td>595703</td>
      <td>589302</td>
      <td>6401</td>
      <td>85992</td>
      <td>1.074529</td>
      <td>14.435381</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Í¥ÄÏïÖÍµ¨</td>
      <td>3985</td>
      <td>1392.0</td>
      <td>609</td>
      <td>619</td>
      <td>694</td>
      <td>671</td>
      <td>186.278736</td>
      <td>516662</td>
      <td>499374</td>
      <td>17288</td>
      <td>76664</td>
      <td>3.346095</td>
      <td>14.838328</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Seoul</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">regex</span><span class="o">=</span><span class="s">'20'</span><span class="p">).</span><span class="n">columns</span> <span class="c1"># filter the column name which included '20'
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Index(['~2014', 2015, 2016, 2017, 2018], dtype='object')
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Drop the column with matching filters
</span><span class="n">Seoul</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">Seoul</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">regex</span><span class="o">=</span><span class="s">'20'</span><span class="p">).</span><span class="n">columns</span><span class="p">,</span> <span class="n">axis</span> <span class="o">=</span><span class="mi">1</span> <span class="p">,</span> <span class="n">inplace</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Seoul</span><span class="p">.</span><span class="n">head</span><span class="p">()</span> 
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>District</th>
      <th>CCTV</th>
      <th>Per_inc</th>
      <th>Population</th>
      <th>Korean</th>
      <th>Foreigner</th>
      <th>Elderly</th>
      <th>r_foreigner</th>
      <th>r_elderly</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Í∞ïÎÇ®Íµ¨</td>
      <td>5221</td>
      <td>80.970537</td>
      <td>549898</td>
      <td>544804</td>
      <td>5094</td>
      <td>72602</td>
      <td>0.926354</td>
      <td>13.202812</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Í∞ïÎèôÍµ¨</td>
      <td>1879</td>
      <td>112.797282</td>
      <td>457042</td>
      <td>452646</td>
      <td>4396</td>
      <td>66401</td>
      <td>0.961837</td>
      <td>14.528424</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Í∞ïÎ∂ÅÍµ¨</td>
      <td>1265</td>
      <td>131.684982</td>
      <td>316750</td>
      <td>312985</td>
      <td>3765</td>
      <td>61660</td>
      <td>1.188635</td>
      <td>19.466456</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Í∞ïÏÑúÍµ¨</td>
      <td>1617</td>
      <td>123.961219</td>
      <td>595703</td>
      <td>589302</td>
      <td>6401</td>
      <td>85992</td>
      <td>1.074529</td>
      <td>14.435381</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Í¥ÄÏïÖÍµ¨</td>
      <td>3985</td>
      <td>186.278736</td>
      <td>516662</td>
      <td>499374</td>
      <td>17288</td>
      <td>76664</td>
      <td>3.346095</td>
      <td>14.838328</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Set the row index
</span><span class="n">Seoul</span><span class="p">.</span><span class="n">set_index</span><span class="p">(</span><span class="s">'District'</span><span class="p">,</span> <span class="n">inplace</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
<span class="n">Seoul</span><span class="p">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s">'Per_inc'</span><span class="p">:</span><span class="s">'CCTV_inc'</span><span class="p">},</span> <span class="n">inplace</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
<span class="n">Seoul</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CCTV</th>
      <th>CCTV_inc</th>
      <th>Population</th>
      <th>Korean</th>
      <th>Foreigner</th>
      <th>Elderly</th>
      <th>r_foreigner</th>
      <th>r_elderly</th>
    </tr>
    <tr>
      <th>District</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Í∞ïÎÇ®Íµ¨</th>
      <td>5221</td>
      <td>80.970537</td>
      <td>549898</td>
      <td>544804</td>
      <td>5094</td>
      <td>72602</td>
      <td>0.926354</td>
      <td>13.202812</td>
    </tr>
    <tr>
      <th>Í∞ïÎèôÍµ¨</th>
      <td>1879</td>
      <td>112.797282</td>
      <td>457042</td>
      <td>452646</td>
      <td>4396</td>
      <td>66401</td>
      <td>0.961837</td>
      <td>14.528424</td>
    </tr>
    <tr>
      <th>Í∞ïÎ∂ÅÍµ¨</th>
      <td>1265</td>
      <td>131.684982</td>
      <td>316750</td>
      <td>312985</td>
      <td>3765</td>
      <td>61660</td>
      <td>1.188635</td>
      <td>19.466456</td>
    </tr>
    <tr>
      <th>Í∞ïÏÑúÍµ¨</th>
      <td>1617</td>
      <td>123.961219</td>
      <td>595703</td>
      <td>589302</td>
      <td>6401</td>
      <td>85992</td>
      <td>1.074529</td>
      <td>14.435381</td>
    </tr>
    <tr>
      <th>Í¥ÄÏïÖÍµ¨</th>
      <td>3985</td>
      <td>186.278736</td>
      <td>516662</td>
      <td>499374</td>
      <td>17288</td>
      <td>76664</td>
      <td>3.346095</td>
      <td>14.838328</td>
    </tr>
  </tbody>
</table>
</div>

<h3 id="3-data-analysis">3. Data analysis</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="n">plt</span><span class="p">.</span><span class="n">rc</span><span class="p">(</span><span class="s">'font'</span><span class="p">,</span> <span class="n">family</span><span class="o">=</span><span class="s">'AppleGothic'</span><span class="p">)</span> <span class="c1"># set the Korean font
</span><span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>  
<span class="c1">#graph appears in the output part
</span></code></pre></div></div>

<p>Check for the correlation between the number of CCTV cameras and populiation.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="n">corrcoef</span><span class="p">(</span><span class="n">Seoul</span><span class="p">[</span><span class="s">'CCTV'</span><span class="p">],</span> <span class="n">Seoul</span><span class="p">[</span><span class="s">'r_foreigner'</span><span class="p">])</span> <span class="c1"># Almost no correlation
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([[ 1.        , -0.06215538],
       [-0.06215538,  1.        ]])
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="n">corrcoef</span><span class="p">(</span><span class="n">Seoul</span><span class="p">[</span><span class="s">'CCTV'</span><span class="p">],</span> <span class="n">Seoul</span><span class="p">[</span><span class="s">'r_elderly'</span><span class="p">])</span> 
<span class="c1"># Shows negative correlation between ratio of elderly and the number of CCTV Cameras
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([[ 1.        , -0.44225083],
       [-0.44225083,  1.        ]])
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="n">corrcoef</span><span class="p">(</span><span class="n">Seoul</span><span class="p">[</span><span class="s">'CCTV'</span><span class="p">],</span> <span class="n">Seoul</span><span class="p">[</span><span class="s">'Population'</span><span class="p">])</span> <span class="c1"># Shows weak positive correlation. 
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([[1.        , 0.38064812],
       [0.38064812, 1.        ]])
</code></pre></div></div>

<p>Compare and visualize the districts with higher number of CCTV cameras and the districts with dense population.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Seoul</span><span class="p">[</span><span class="s">'CCTV'</span><span class="p">].</span><span class="n">sort_values</span><span class="p">().</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span> <span class="s">'barh'</span><span class="p">,</span> <span class="n">grid</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">),</span> <span class="n">color</span> <span class="o">=</span> <span class="s">'gray'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="\img\posts\housing\output_47_0.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Seoul</span><span class="p">[</span><span class="s">'r_CCTV'</span><span class="p">]</span> <span class="o">=</span> <span class="n">Seoul</span><span class="p">[</span><span class="s">'CCTV'</span><span class="p">]</span><span class="o">/</span><span class="n">Seoul</span><span class="p">[</span><span class="s">'Population'</span><span class="p">]</span><span class="o">*</span><span class="mi">100</span>
<span class="n">Seoul</span><span class="p">[</span><span class="s">'r_CCTV'</span><span class="p">].</span><span class="n">sort_values</span><span class="p">().</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'barh'</span><span class="p">,</span> <span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">),</span> <span class="n">grid</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">'gray'</span><span class="p">)</span>
<span class="c1">#Seoul['r_CCTV'].set_color('r') #Want to change the color of one bar
</span><span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="\img\posts\housing\output_48_0.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fp</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">polyfit</span><span class="p">(</span><span class="n">Seoul</span><span class="p">[</span><span class="s">'Population'</span><span class="p">],</span> <span class="n">Seoul</span><span class="p">[</span><span class="s">'CCTV'</span><span class="p">],</span> <span class="mi">1</span><span class="p">)</span> <span class="c1"># 1Ï∞®Ìï®Ïàò numbers
</span><span class="n">f1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">poly1d</span><span class="p">(</span><span class="n">fp</span><span class="p">)</span> <span class="c1"># y-axis, first order function
</span><span class="n">fx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">100000</span><span class="p">,</span><span class="mi">700000</span><span class="p">,</span><span class="mi">100</span><span class="p">)</span> <span class="c1"># x-axis
</span><span class="n">Seoul</span><span class="p">[</span><span class="s">'resid'</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="n">Seoul</span><span class="p">[</span><span class="s">'CCTV'</span><span class="p">]</span><span class="o">-</span> <span class="n">f1</span><span class="p">(</span><span class="n">Seoul</span><span class="p">[</span><span class="s">'Population'</span><span class="p">]))</span> <span class="c1"># calculate residual
</span><span class="n">Seoul_srt</span> <span class="o">=</span> <span class="n">Seoul</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="s">'resid'</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>
<span class="n">Seoul_srt</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CCTV</th>
      <th>CCTV_inc</th>
      <th>Population</th>
      <th>Korean</th>
      <th>Foreigner</th>
      <th>Elderly</th>
      <th>r_foreigner</th>
      <th>r_elderly</th>
      <th>r_CCTV</th>
      <th>resid</th>
    </tr>
    <tr>
      <th>District</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Í∞ïÎÇ®Íµ¨</th>
      <td>5221</td>
      <td>80.970537</td>
      <td>549898</td>
      <td>544804</td>
      <td>5094</td>
      <td>72602</td>
      <td>0.926354</td>
      <td>13.202812</td>
      <td>0.949449</td>
      <td>2570.380612</td>
    </tr>
    <tr>
      <th>ÏÜ°ÌååÍµ¨</th>
      <td>1586</td>
      <td>96.287129</td>
      <td>680883</td>
      <td>674095</td>
      <td>6788</td>
      <td>89539</td>
      <td>0.996941</td>
      <td>13.150424</td>
      <td>0.232933</td>
      <td>1442.540920</td>
    </tr>
    <tr>
      <th>Í¥ÄÏïÖÍµ¨</th>
      <td>3985</td>
      <td>186.278736</td>
      <td>516662</td>
      <td>499374</td>
      <td>17288</td>
      <td>76664</td>
      <td>3.346095</td>
      <td>14.838328</td>
      <td>0.771297</td>
      <td>1430.274035</td>
    </tr>
    <tr>
      <th>ÎèÑÎ¥âÍµ¨</th>
      <td>858</td>
      <td>88.157895</td>
      <td>333495</td>
      <td>331238</td>
      <td>2257</td>
      <td>60023</td>
      <td>0.676772</td>
      <td>17.998171</td>
      <td>0.257275</td>
      <td>1168.247488</td>
    </tr>
    <tr>
      <th>Í∞ïÏÑúÍµ¨</th>
      <td>1617</td>
      <td>123.961219</td>
      <td>595703</td>
      <td>589302</td>
      <td>6401</td>
      <td>85992</td>
      <td>1.074529</td>
      <td>14.435381</td>
      <td>0.271444</td>
      <td>1165.777237</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">Seoul</span><span class="p">[</span><span class="s">'Population'</span><span class="p">],</span> <span class="n">Seoul</span><span class="p">[</span><span class="s">'CCTV'</span><span class="p">],</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">50</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="n">Seoul</span><span class="p">[</span><span class="s">'resid'</span><span class="p">])</span> <span class="c1"># s is marker size
</span><span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">fx</span><span class="p">,</span> <span class="n">f1</span><span class="p">(</span><span class="n">fx</span><span class="p">),</span> <span class="n">ls</span><span class="o">=</span><span class="s">'dashed'</span><span class="p">,</span> <span class="n">lw</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="s">'g'</span><span class="p">)</span>
<span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">text</span><span class="p">(</span><span class="n">Seoul_srt</span><span class="p">[</span><span class="s">'Population'</span><span class="p">][</span><span class="n">n</span><span class="p">]</span><span class="o">*</span><span class="mf">1.02</span><span class="p">,</span> <span class="n">Seoul_srt</span><span class="p">[</span><span class="s">'CCTV'</span><span class="p">][</span><span class="n">n</span><span class="p">]</span><span class="o">*</span><span class="mf">0.98</span><span class="p">,</span> <span class="n">Seoul_srt</span><span class="p">.</span><span class="n">index</span><span class="p">[</span><span class="n">n</span><span class="p">],</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">15</span><span class="p">)</span>
<span class="c1">#plt.text(Seoul_srt['Population'][0]*1.01, Seoul_srt['CCTV'][0]*0.99, Seoul_srt.index[0], fontsize = 16)
</span><span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Population'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'CCTV cameras'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">colorbar</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="n">grid</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="\img\posts\housing\output_50_0.png" alt="png" /></p>

:ET